/*
 * Generated by breeze-generator (https://github.com/weibreeze/breeze-generator)
 * Schema: testmsg.breeze
 * Date: 2019/8/22
 */

#ifndef BREEZE_CPP_TESTMSG_BREEZE_H
#define BREEZE_CPP_TESTMSG_BREEZE_H

#include "breeze.h"

class MyEnum : public BreezeEnum {
public:
    enum EMyEnum {
        E1 = 1,
        E2 = 2,
        E3 = 3,
    };

    EMyEnum value_{};

    MyEnum();

    explicit MyEnum(const EMyEnum &e);

    friend bool operator==(const MyEnum &a, const MyEnum &b);

    friend bool operator==(const MyEnum &a, const EMyEnum &b);

    friend bool operator==(const EMyEnum &a, const MyEnum &b);

    friend bool operator!=(const MyEnum &a, const MyEnum &b);

    friend bool operator!=(const MyEnum &a, const EMyEnum &b);

    friend bool operator!=(const EMyEnum &a, const MyEnum &b);

    MyEnum &operator=(const EMyEnum &a);

    int write_to(BytesBuffer *buf) const override;

    int read_from(BytesBuffer *buf) override;

    std::string get_name() const override;

    std::string get_alias() override;

    std::shared_ptr<BreezeSchema> get_schema() override;

    void set_name(const std::string &name) override;

    int read_enum(BytesBuffer *) override;

private:
    std::shared_ptr<BreezeSchema> schema_{};
};

class TestSubMsg : public BreezeMessage {
public:
    TestSubMsg();

    std::string myString{};

    int32_t myInt{};

    int64_t myInt64{};

    float_t myFloat32{};

    double_t myFloat64{};

    uint8_t myByte{};

    std::vector<uint8_t> myBytes{};

    std::unordered_map<std::string, std::vector<uint8_t>> myMap1{};

    std::unordered_map<int32_t, std::vector<int32_t>> myMap2{};

    std::vector<int32_t> myArray{};

    bool myBool{};

    int write_to(BytesBuffer *buf) const override;

    int read_from(BytesBuffer *buf) override;

    std::string get_name() const override;

    std::string get_alias() override;

    std::shared_ptr<BreezeSchema> get_schema() override;

    void set_name(const std::string &name) override;

private:
    std::shared_ptr<BreezeSchema> schema_{};
};

class TestMsg : public BreezeMessage {
public:
    TestMsg();

    int32_t myInt{};

    std::string myString{};

    std::unordered_map<std::string, TestSubMsg> myMap{};

    std::vector<TestSubMsg> myArray{};

    TestSubMsg subMsg{};

    MyEnum myEnum{};

    std::vector<MyEnum> enumArray{};

    int write_to(BytesBuffer *buf) const override;

    int read_from(BytesBuffer *buf) override;

    std::string get_name() const override;

    std::string get_alias() override;

    std::shared_ptr<BreezeSchema> get_schema() override;

    void set_name(const std::string &name) override;

private:
    std::shared_ptr<BreezeSchema> schema_{};
};

#endif //BREEZE_CPP_TESTMSG_BREEZE_H
